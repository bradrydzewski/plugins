{
  "kind": "plugin",
  "type": "step",
  "name": "terraform",
  "spec": {
    "name": "Terraform",
    "description": "The Terraform plugin applies the infrastructure configuration contained within the repository.",
    "step": {
      "type": "script",
      "spec": {
        "image": "jmccann/drone-terraform",
        "envs": {
          "PLUGIN_CA_CERT": "${{ inputs.ca_cert }}",
          "PLUGIN_PARALLELISM": "${{ inputs.parallelism }}",
          "PLUGIN_PLAN": "${{ inputs.plan }}",
          "PLUGIN_REMOTE": "${{ inputs.remote }}",
          "PLUGIN_ROLE_ARN_TO_ASSUME": "${{ inputs.role_arn_to_assume }}",
          "PLUGIN_ROOT_DIR": "${{ inputs.root_dir }}",
          "PLUGIN_SECRETS": "${{ inputs.secrets }}",
          "PLUGIN_SENSITIVE": "${{ inputs.sensitive }}",
          "PLUGIN_VARS": "${{ inputs.vars }}"
        }
      }
    },
    "inputs": {
      "ca_cert": {
        "type": "string",
        "description": "ca cert to add to your environment to allow terraform to use internal/private resources",
        "mask": true
      },
      "parallelism": {
        "type": "string",
        "description": "The number of concurrent operations as Terraform walks its graph.",
        "mask": true
      },
      "plan": {
        "type": "boolean",
        "description": "Whether to run a plan before applying the configuration.",
        "default": "false"
      },
      "remote": {
        "type": "array",
        "description": "contains the configuration for the Terraform remote state tracking."
      },
      "role_arn_to_assume": {
        "type": "string",
        "description": "A role to assume before running the terraform commands.",
        "mask": true
      },
      "root_dir": {
        "type": "string",
        "description": "The root directory where the terraform files live. When unset, the top level directory will be assumed.",
        "mask": true
      },
      "secrets": {
        "type": "array",
        "description": "variables to pass to the Terraform `plan` and `apply` commands. Each value is passed as a `-var <key>=<ENVVAR>` option.  The `ENVVAR` is read as the key/pair value.",
        "mask": true
      },
      "sensitive": {
        "type": "boolean",
        "description": "Whether or not to suppress terraform commands to stdout.",
        "default": "false",
        "mask": true
      },
      "vars": {
        "type": "array",
        "description": "The backend to use for the remote."
      }
    }
  }
}
